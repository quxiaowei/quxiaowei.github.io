<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A CodeSmith</title><link>https://quxiaowei.github.io/</link><description>Recent content on A CodeSmith</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://quxiaowei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>JINJI KIKKO</title><link>https://quxiaowei.github.io/album/2021-03-08/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-08/</guid><description> Burgundy Red My Jinji ♥︎ New Drug</description></item><item><title>丑奴儿</title><link>https://quxiaowei.github.io/album/2021-03-07/</link><pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-07/</guid><description> Intro 丑 烂泥 ♥︎ 勇敢的人 大风吹 ♥︎ 艾玛 等 鬼 ♥︎ 在 山海 我们 情歌</description></item><item><title>Inside Llewyn Davis (Original Soundtrack Recording)</title><link>https://quxiaowei.github.io/album/2021-03-05/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-05/</guid><description>Hang Me, Oh Hang Me ♥︎ Oscar Issac
Fare Thee Well (Dink&amp;rsquo;s Song) Oscar Isaac &amp;amp; Marcus Mumford
The Last Thing On My Mind Stark Sands Feat. Punch Brothers
Five Hundred Miles Justin Timberlake, Carey Mulligan &amp;amp; Stark Sands
Please Mr. Kennedy Justin Timberlake, Oscar Isaac &amp;amp; Adam Driver
Green, Green Rocky Road Oscar Issac</description></item><item><title>La La Land: Original Motion Picture Score</title><link>https://quxiaowei.github.io/album/2021-03-04/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-04/</guid><description> Mia Gets Home Bathroom Mirror / You&amp;rsquo;re Coming Right? Classic Rope-A-Dope Mia &amp;amp; Sebastian&amp;rsquo;s Theme Stroll Up The Hill There The Whole Time / Twirl Bogart &amp;amp; Bergman Mia Hates Jazz ♥︎ Herman&amp;rsquo;s Habit Rialto at Ten Rialto Mia &amp;amp; Sebastian&amp;rsquo;s Theme (Late for the Date) Planetarium Holy Hell Summer Montage / Madeline It Pays Chicken on A Stick City of Stars / May Finally Come True Chinatown Surprise Boise Missed The Play It&amp;rsquo;s Over / Engagement Party The House In Front Of The Library You Love Jazz Now Cincinnati Epilogue ♥︎ The End Credits Mia &amp;amp; Sebastian&amp;rsquo;s Theme (Celesta)</description></item><item><title>大人</title><link>https://quxiaowei.github.io/album/2021-03-03/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-03/</guid><description> 秘密 喧嘩上等 化粧直し ♥︎ スーパースター 修羅場 adult ver. 雪国 歌舞伎 ブラックアウト 黄昏泣き 透明人間 手紙</description></item><item><title>神的遊戲</title><link>https://quxiaowei.github.io/album/2021-03-02/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-02/</guid><description> 玫瑰色的你 瘋狂的陽光 藍天白雲 ♥︎ 兩者 ♥︎ 如何 ♥︎ 危險的, 是 ♥︎ Triste 我想你要走了 ♥︎ 艷火 日子</description></item><item><title>梦幻丽莎发廊</title><link>https://quxiaowei.github.io/album/2021-03-01/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/album/2021-03-01/</guid><description> 初恋 热带 石牌桥 有所追求 阿虎 梦幻丽莎发廊 ♥︎ 柔河里 ♥︎ 秧歌舞 很多 九条人 阿珍爱上了阿强 楼房来四散起，路不见狗相连</description></item><item><title>ABAP 发布 RESTful Web Service</title><link>https://quxiaowei.github.io/post/abap_provide_restful_ws/</link><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/abap_provide_restful_ws/</guid><description>对应之前调用 RESTful Web Service 的文章，今天补一篇发布 Web Service 的说明。
首先要搞到一个网址，以供外部访问。SICF 创建一个子服务，需要注意两个地方：
登陆数据（这个地方我还没怎么搞明白，我就用的自己的帐号、密码，导致密码被锁） 处理器清单，这里的处理填入的类就是我们处理请求的地方 这个类的注意点（可能因系统版本不同）
超类：CL_REST_HTTP_HANDLER 接口：IF_HTTP_EXTENSION， IF_REST_APPLICATION， IF_REST_HANDLER 这三个接口是 必须的。IF_REST_RESOURCE 这个似乎可以分别处理 GET, POST 等方法，但可能是版本的问题，我这边没用到 方法 IF_REST_APPLICATION~GET_ROOT_HANDLER 用来绑定不同的网址到不同的类，还有模板变量等等。关于模板的语法，可以去 CL_REST_ROUTER~FIND_MATCH 的代码中注释中找到。参考 似乎是个很古老的网页了。
实现 IF_REST_HANDLER~HANDLE 方法
注意: 有些传入的参数需要 unescape 一下，对应的在调用的时候要 escape 下 cl_http_utility=&amp;gt;if_http_utility~unescape_url cl_http_utility=&amp;gt;if_http_utility~escape_url 这个类里还提供一些其他方法，像 base64 等。
这里我只处理了 get 请求，没有区分开来，这点还没怎么研究。可以把 IO_REQUEST, IO_RESPONSE 可以放在类属性里，供 get、post 等方法使用。可以看下 IF_HTTP_EXTENSION~HANDLE_REQUEST 的代码，会有帮助。
最后给个参考 http://scn.sap.com/docs/DOC-51570 ，因为系统版本不同，所以具体代码对我没有太大参考价值，但能提供大概的提示。
- 前篇 &amp;ldquo;ABAP 调用 RESTful Web Service&amp;rdquo;</description></item><item><title>用 Python 写了个简单的计算器</title><link>https://quxiaowei.github.io/post/python_simple_calculator/</link><pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/python_simple_calculator/</guid><description>看到网上有人问，经典作业题，实现了一个练练手。没有合法性校验，必须用空格分隔每个操作符和数字，很简陋。</description></item><item><title>Python 异步协程 Coroutine</title><link>https://quxiaowei.github.io/post/python_async/</link><pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/python_async/</guid><description>tornado 以异步响应为特色，据说是以 generator 实现的，之前简单研究过，根据原理写了一段简陋的演示代码。3.5 之后 python 增加了async 关键字，就不需要自己实现了。这段代码是实现一个异步响应多个链接 socket server。有两个关键点：
用 decorator 把 generator 封装在 future 里 在 loop 中调用 generator 的 next，send 方法，传递前一步的结果 2016/09/29 更新
最近在重看异步相关的内容，发现以前的理解是错误的。内容比较多，这里列出几个我理解中的错误点 和 我认为的关键点。
async | await 关键字只是一个 接口，只是一个 接口，它并不能将同步的代码变成异步，异步需要其他的库来实现，比如标准的 asyncio 库、tornado、还有 David Beazley 写的一个实验性 curio 库（我目前正在看他的代码）。
async def: 就像 yield 催生了 generator 类型， async def 催生了 coroutine 类型（叫做 native coroutine 以区别于 3.5 之前的 coroutine ）。await 后必须跟着一个 awaitable 的对象，即实现 __await()__ 方法的对象，至于这个对象是用 future 还是其他什么东西并不重要。大部分库基于类似 future 定义了自己的 task，每家的构建都不同，但实质是通过 generator | send 机制 实现回调。</description></item><item><title>ABAP 调用 RESTful Web Service</title><link>https://quxiaowei.github.io/post/abap_call_restful_webservice/</link><pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/abap_call_restful_webservice/</guid><description>哎！一片干的掉渣的文章。
关于REST REST 是基于 HTTP 的 Web Service 架构，URL 表示资源，HTTP method: GET, POST, DELETE 等等，表示发送，收取，删除等动作。我们是从第三方接收资源，所以用 GET。
SOAP 是另一种基于 HTTP 的 Web Service 协议，不在本文范围内。
以 http://example/credit/20160516/0000001880/1380 为例，其中 20160516 代表日期，0000001880 代表客户，1380 代表公司，这些作为 Web Service 的参数发给接口。
HTTP调用 ABAP 有许多发送 HTTP GET 请求的方法。我用的是函数: HTTP_GET。注意设定超时限制，防止网络不通时程序卡死。
DATA: status(3) TYPE c , url TYPE c LENGTH 200, error TYPE string. DATA: response TYPE TABLE OF xtext100 WITH HEADER LINE, &amp;quot; 返回内容 &amp;quot; HTTP header response_headers TYPE TABLE OF text100 WITH HEADER LINE.</description></item><item><title>FFMPEG Cheatsheet</title><link>https://quxiaowei.github.io/post/ffmpeg_cheatsheet/</link><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/ffmpeg_cheatsheet/</guid><description>-vcodec -acodec 视屏，音频编码 copy 拷贝源文件
合并视屏
ffmpeg -f concat -i buffer_list -c copy output.mkv截取视频
ffmpeg -i source.avi -ss 00:01:35 -t 00:47:13 -vcodec copy output.mp4-ss 开始时间 -t 时长
缩小视屏
ffmpeg -i a.mp4 -vf scale=853:480 -acodec acc -vcodec h264 out.mp4裁剪视屏
ffmpeg -i a.mp5 -strict -2 -vf crop=1080:1080:0:420 out.mp4crop=width:height:x:y</description></item><item><title>Python 的 nested() 不见了</title><link>https://quxiaowei.github.io/post/python_no_nested_anymore/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/python_no_nested_anymore/</guid><description>最近在和别的系统测试 Rest Web Service 的接口，用 python 写了单元测试脚本 (Gist)。却发现nested不见了，查了替代方案记下。
with 写法：
with open('D:\\input.txt') as file1: with open('D:\\output.txt' 'w+') as file2: for line in file1.readline(): file2.write(line+'\n') nested() 写法（caveat: 已经不可用了）：
from contextlib import nested with (open('D:\\input.txt'), open('D:\\output.txt', 'w+')) \ as (file1, file2): for line in file1.readline(): file2.write(line+'\n') 新写法：
from contextlib import ExitStack with ExitStack() as stack: file1 = stack.enter_context(open('D:\\input.txt')) file2 = stack.enter_context(open('D:\\output.txt', 'w+')) for line in file1.readline(): file2.write(line+'\n') 其实对于一两个资源来说，直接用 nested-with 的语法写起来还行，用 ExitStack 看起来就有点啰嗦了。对于多个资源来说，用ExitStack + list comprehence写起来倒也不麻烦。</description></item><item><title>Bilibili 视频抓取脚本</title><link>https://quxiaowei.github.io/post/bilibili_script/</link><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/bilibili_script/</guid><description>周末写了个zsh脚本，从B站上下载《不能结婚的男人》，贴上代码。
for i in {1..12} do url=http://www.bilibili.com/video/av3794937/index_$i.html echo $url youtube-dl -o &amp;quot;SeGmEnT-$i-%(playlist_index)s.%(ext)s&amp;quot; $url rm -f buffer_list touch buffer_list for file in $(ls SeGmEnT-$i-*.flv) do echo file &amp;quot;'$file'&amp;quot; &amp;gt;&amp;gt; buffer_list done ffmpeg -f concat -i buffer_list -c copy $i.mkv done rm -f buffer_list</description></item><item><title>智力的狂傲</title><link>https://quxiaowei.github.io/post/the_pride_of_intellect/</link><pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/the_pride_of_intellect/</guid><description>在《玫瑰的名字》中，威廉与老友乌贝尔蒂重逢后有段对话，其中乌贝尔蒂批评威廉的理性、对知识探求 只是 「培养智力的傲狂的借口」。
读到这里我似乎突然理解了，基督教中关于偷食禁果获得智慧是一种原罪的逻辑所在，如下：
知识，智力 &amp;gt; 构成对权威的挑战 &amp;gt; 有可能形成自负，傲狂 &amp;gt; 不神圣，不道德 &amp;gt; 罪恶
假如神是无所不在，且绝对正确的，那人们所要做的就只有对神的绝对热爱，而任何对尝试对世界（神的创造）的探索，都构成对神的怀疑、不信任，所以是狂妄、罪恶的，甚至招来灾祸。探索首先是不必要的，其次探索可能带来不同的观点，这种观点可能与神的意志不一致，是歧途，是诱惑，所以得杜绝。从这种思路中不难看出一种愚昧的奴性，胆怯的意味。
理性与感性 同样的前提我们可以得到一个不同结论：就是对世界的探索，对知识的追求，正是为了对所谓神的更深入的理解和更深刻的热爱，威廉和他所崇拜罗杰培根大概就是这么一种思路。
上下文中，乌贝尔蒂提出了一个关于「理性会导致心灵的语言能力枯竭」的观点，这里我姑且简化成：「他认为理性和感性是对立的，即理性会损坏感性」。这里的感性构成了对某种神秘存在的神秘体验（感觉像嗑药一般的东西）而理性会破坏这种盲目而热烈的情感，因此是不好的。但真的是这样吗？我联想到了道金斯《The Magic of Reality》。古人见到七色彩虹也许会赞美圣人对应的七种美德。而理解彩虹形成的原理，并不会损坏我们欣赏彩虹的乐趣。归根结底，并不是什么破坏了趣味，而是你只会接受前人二手趣味却无法从客观世界中发现新的趣味，是你自己没有趣味。</description></item><item><title>由巴黎恐怖袭击所想到的</title><link>https://quxiaowei.github.io/post/paris_terror_attack/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>https://quxiaowei.github.io/post/paris_terror_attack/</guid><description>这次巴黎恐怖袭击时间后，我在想，依照以往的舆论发展方向，不久就会出现这样一种说法：恐怖袭击发动者不是真正的穆斯林，真正的穆斯林是热爱和平的。这种言论通常是会获得拥有善意的听众正面的回应的。
但这种说法是否真的在道理上说的通呢？
主要有两个问题：
1 谁是真正的穆斯林？ 在我宗教这种小白看来，无疑存在两种穆斯林：坏的穆斯林，不坏的穆斯林。两边无疑信奉《古兰经》和穆罕默德，两边都认为自己是真正的穆斯林，指责对方不是真正的穆斯林。显然不能指望着从任何一方的嘴中得到答案。大多数善良人们应该和我一样认同不坏的甚至的好的穆斯林了（注意我用的是「认同」）。那究竟是，真正的穆斯林恰好是「不坏」的那个？还是善意影响了我们的判断？很难在这个选择题上得到「客观」的答案。而我却早已给出「好」与「坏」的答案。指导我们作出选择的东西是道德，道德的优先级显然是高于宗教的。而本题的答案是，我们不关心谁是真正的这种问题。谁是坏的我们就要反对谁。
牵出宗教和道德的问题，总有人说宗教能够规范人的道德，就像我们之前已经基于道德对宗教作出「好」与「坏」的判断，可见道德是早就存在于我们的心里的。而宗教至于道德的作用，正如当代哲学家伯纳德 ·威廉姆斯的一句名言所述 ，是 「多此一举 」（摘自《我们时代的伦理学》）。在我看看来不仅仅是「多此一举」在我看来有时还会起到反作用（基督教历史上也不鲜见）。换句话说，假如宗教教授坏的道德，作为信众能够指责，退出嘛！这显然和某些宗教树立绝对权威是相矛盾而不被允许的。
2 真正的穆斯林是真实存在的吗？ 在我看来真正的穆斯林并不存在，而只是人们脑中一个概念和善意地一厢情愿。宗教是存在于人们脑中的，每一个信众的行动构成这个宗教的。「好」与「坏」的两方都是遵循《古兰经》的，而显然坏的一方的行为与字面的教诲更为相符，我们都批判教条主义，而基于通一段文本，两种不同阐释我们是无法判断那种是「正宗」那种是「歪曲」的，这两种都是通过人脑加工过产物。我们之所以选择「好」同样也是我们脑中的 道德在起作用，而不是因为「好」的一方更「真正」。</description></item></channel></rss>